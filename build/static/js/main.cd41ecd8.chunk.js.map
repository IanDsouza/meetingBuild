{"version":3,"sources":["netConfig.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["ServerAddr","axios","create","baseURL","timeout","headers","withCredentials","transformRequest","data","console","log","JSON","stringify","Main","state","users","selectedUsers","userCount","averageContribution","overallContribution","getUserCount","post","then","res","setState","alert","validation","getParticipants","get","handleChange","event","allUsers","index","findIndex","userData","push","splice","getAverageContribution","getMostLeastContribution","this","className","style","padding","Card","width","Body","Container","Row","Col","md","border","ListGroup","map","user","i","Item","key","name","id","type","ref","onChange","e","Tabs","transition","defaultActiveKey","Tab","eventKey","title","theme","VictoryTheme","material","height","domainPadding","x","y","scale","dataComponent","colorScale","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd41ecd8.chunk.js","sourcesContent":["import axios from \"axios\";\n// export const serverIp = \"http://127.0.0.1:8000/\";\nexport const serverIp = \"http://rippedcoders.com:8002/\";\n\nexport const ServerAddr = axios.create({\n  baseURL: serverIp,\n  timeout: 30000,\n  headers: {},\n  withCredentials: true,\n  transformRequest: [\n    function (data, headers) {\n      console.log(\"data\", data);\n      return JSON.stringify(data);\n    },\n  ],\n});\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport { ServerAddr } from \"../netConfig\";\nimport {\n  VictoryChart,\n  VictoryBar,\n  Bar,\n  VictoryAxis,\n  VictoryTheme,\n  VictoryPie,\n} from \"victory\";\nimport {\n  Row,\n  Col,\n  Container,\n  ListGroup,\n  Nav,\n  Tabs,\n  Tab,\n} from \"react-bootstrap\";\n\nimport \"./Main.css\";\n\nclass Main extends Component {\n  state = {\n    users: [],\n    selectedUsers: [],\n    userCount: [],\n    averageContribution: [],\n    overallContribution: [],\n  };\n\n  componentDidMount() {\n    this.getParticipants();\n  }\n\n  getUserCount = () => {\n    ServerAddr.post(\"user/count\", {\n      users: this.state.selectedUsers,\n    }).then((res) => {\n      if (res) {\n        console.log(\"res\", res);\n        var data = res[\"data\"][\"data\"];\n        this.setState({ userCount: data });\n      } else {\n        alert(res.data.validation);\n      }\n    });\n  };\n\n  getAverageContribution() {\n    ServerAddr.post(\"user/average/contribution\", {\n      users: this.state.selectedUsers,\n    }).then((res) => {\n      if (res) {\n        console.log(\"average\", res);\n        var data = res[\"data\"][\"data\"];\n        this.setState({ averageContribution: data });\n      } else {\n        alert(res.data.validation);\n      }\n    });\n  }\n\n  getMostLeastContribution() {\n    ServerAddr.get(\"user/most&least/contribution\").then((res) => {\n      if (res) {\n        console.log(\"most/least\", res);\n        var data = res[\"data\"][\"data\"][\"contribution\"];\n        this.setState({ overallContribution: data });\n      } else {\n        alert(res.data.validation);\n      }\n    });\n  }\n\n  getParticipants = () => {\n    ServerAddr.get(\"participants\").then((res) => {\n      console.log(\"data\", res);\n      if ((res[\"status\"] = 200)) {\n        var data = res[\"data\"][\"data\"];\n        console.log(\"response\", data);\n        this.setState({ users: data });\n        // this.setState({ selectedUsers: data });\n      } else {\n      }\n    });\n  };\n\n  handleChange = (event, data) => {\n    let allUsers = this.state[\"selectedUsers\"];\n    let index = allUsers.findIndex((userData) => userData[\"id\"] === data[\"id\"]);\n    console.log(\"index\", index);\n\n    if (index === -1) allUsers.push(data);\n    else allUsers.splice(index, 1);\n    this.setState({ selectedUsers: allUsers });\n    console.log(\"users data\", allUsers, this.state.users);\n    this.getUserCount();\n    this.getAverageContribution();\n    this.getMostLeastContribution();\n  };\n\n  render() {\n    const {\n      users,\n      userCount,\n      averageContribution,\n      overallContribution,\n    } = this.state;\n    return (\n      <div>\n        <div className=\"header\">\n          <h1>COMBINE AI MEETING ANALYSIS</h1>\n        </div>\n        <div className=\"body\" style={{ padding: \"1%\" }}>\n          <Card style={{ width: \"100%\" }}>\n            <Card.Body>\n              <Container>\n                <Row>\n                  <Col md={2}>\n                    <div style={{ border: \"1px solid\" }}>\n                      <p>Participants</p>\n                      <ListGroup>\n                        {users.map((user, i) => {\n                          return (\n                            <ListGroup.Item key={i}>\n                              {user.name} {user.id}\n                              <input\n                                type=\"checkbox\"\n                                ref=\"complete\"\n                                onChange={(e) => this.handleChange(e, user)}\n                              />\n                            </ListGroup.Item>\n                          );\n                        })}\n                      </ListGroup>\n                    </div>\n                  </Col>\n\n                  <Col md={10}>\n                    <div style={{ border: \"1px solid\" }}>\n                      <Tabs\n                        transition={false}\n                        defaultActiveKey=\"1\"\n                        id=\"uncontrolled-tab-example\"\n                      >\n                        <Tab eventKey=\"1\" title=\"Number of Times spoken\">\n                          <p>Number of Times spoken</p>\n                          <VictoryChart\n                            theme={VictoryTheme.material}\n                            height={300}\n                            width={300}\n                            domainPadding={{ x: 50, y: [0, 20] }}\n                            scale={{ x: \"time\" }}\n                          >\n                            <VictoryBar\n                              dataComponent={<Bar />}\n                              style={this.state.style}\n                              data={userCount}\n                              x=\"user__name\"\n                              y=\"dcount\"\n                            />\n                          </VictoryChart>\n                        </Tab>\n                        <Tab eventKey=\"2\" title=\"Overall Contribution\">\n                          <p>Overall Contribution</p>\n                          <VictoryPie\n                            data={overallContribution}\n                            colorScale={[\"orange\", \"gold\", \"cyan\", \"navy\"]}\n                            x=\"name\"\n                            y=\"percentage_contribution\"\n                          />\n                        </Tab>\n\n                        <Tab eventKey=\"3\" title=\"Average Contribution/User\">\n                          <p> Average Contribution/User</p>\n\n                          <VictoryChart\n                            theme={VictoryTheme.material}\n                            height={300}\n                            width={300}\n                            domainPadding={{ x: 50, y: [0, 20] }}\n                            scale={{ x: \"time\" }}\n                          >\n                            <VictoryBar\n                              dataComponent={<Bar />}\n                              style={this.state.style}\n                              data={averageContribution}\n                              x=\"name\"\n                              y=\"avg\"\n                            />\n                          </VictoryChart>\n                        </Tab>\n                      </Tabs>\n                    </div>\n                  </Col>\n                </Row>\n              </Container>\n\n              {/* <Button variant=\"primary\">Go somewhere</Button> */}\n            </Card.Body>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./Components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}