{"version":3,"sources":["netConfig.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["ServerAddr","axios","create","baseURL","timeout","headers","withCredentials","transformRequest","data","JSON","stringify","Main","state","users","selectedUsers","userCount","averageContribution","overallContribution","mostCount","getParticipants","get","then","res","console","log","setState","getUserCount","post","alert","validation","handleChange","event","allUsers","index","findIndex","userData","push","splice","getAverageContribution","this","getMostLeastContribution","className","style","padding","Card","width","Body","Row","Col","md","ListGroup","map","user","i","Item","key","marginLeft","name","type","ref","onChange","e","Tabs","margin","transition","defaultActiveKey","id","Tab","eventKey","title","theme","VictoryTheme","material","height","domainPadding","x","y","scale","centerTitle","orientation","gutter","border","stroke","fontSize","symbol","fill","dataComponent","colorScale","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yTAIaA,E,OAAaC,EAAMC,OAAO,CACrCC,QAHsB,gCAItBC,QAAS,IACTC,QAAS,GACTC,iBAAiB,EACjBC,iBAAkB,CAChB,SAAUC,EAAMH,GACd,OAAOI,KAAKC,UAAUF,O,4GCgSbG,G,mNA5QbC,MAAQ,CACNC,MAAO,GACPC,cAAe,GACfC,UAAW,GACXC,oBAAqB,GACrBC,oBAAqB,GACrBC,UAAW,I,EAQbC,gBAAkB,WAEhBnB,EAAWoB,IAAI,gBAAgBC,MAAK,SAACC,GAEnC,GADAC,QAAQC,IAAI,OAAQF,GACfA,EAAG,OAAa,IAAM,CACzB,IAAId,EAAOc,EAAG,KAAH,KACX,EAAKG,SAAS,CAAEZ,MAAOL,S,EAM7BkB,aAAe,WAEb1B,EAAW2B,KAAK,aAAc,CAC5Bd,MAAO,EAAKD,MAAME,gBACjBO,MAAK,SAACC,GACP,GAAIA,EAAK,CACP,IAAId,EAAOc,EAAG,KAAH,KACX,EAAKG,SAAS,CAAEV,UAAWP,SAE3BoB,MAAMN,EAAId,KAAKqB,gB,EAiCrBC,aAAe,SAACC,EAAOvB,GAErB,IAAIwB,EAAW,EAAKpB,MAAL,cACXqB,EAAQD,EAASE,WAAU,SAACC,GAAD,OAAcA,EAAQ,KAAW3B,EAAI,OACrD,IAAXyB,EAAcD,EAASI,KAAK5B,GAC3BwB,EAASK,OAAOJ,EAAO,GAC5B,EAAKR,SAAS,CAAEX,cAAekB,IAC/B,EAAKN,eACL,EAAKY,0B,kEAlELC,KAAKpB,kBACLoB,KAAKC,6B,+CA6BmB,IAAD,OACvBxC,EAAW2B,KAAK,4BAA6B,CAC3Cd,MAAO0B,KAAK3B,MAAME,gBACjBO,MAAK,SAACC,GACP,GAAIA,EAAK,CACPC,QAAQC,IAAI,UAAWF,GACvB,IAAId,EAAOc,EAAG,KAAH,KACX,EAAKG,SAAS,CAAET,oBAAqBR,SAErCoB,MAAMN,EAAId,KAAKqB,iB,iDAKO,IAAD,OACzB7B,EAAWoB,IAAI,gCAAgCC,MAAK,SAACC,GACnD,GAAIA,EAAK,CACPC,QAAQC,IAAI,aAAcF,GAC1B,IAAId,EAAOc,EAAG,KAAH,KACX,EAAKG,SAAS,CAAER,oBAAqBT,EAAI,eACzC,EAAKiB,SAAS,CAAEP,UAAWV,EAAI,iBAC/Be,QAAQC,IAAI,QAAS,EAAKZ,MAAMM,gBAEhCU,MAAMN,EAAId,KAAKqB,iB,+BAgBX,IAAD,SAOHU,KAAK3B,MALPC,EAFK,EAELA,MACAE,EAHK,EAGLA,UACAC,EAJK,EAILA,oBACAC,EALK,EAKLA,oBALK,EAMLC,UAGF,OACE,6BACE,yBAAKuB,UAAU,UACb,4DAEF,yBAAKA,UAAU,OAAOC,MAAO,CAAEC,QAAS,OACtC,kBAACC,EAAA,EAAD,CAAMF,MAAO,CAAEG,MAAO,SACpB,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,yBAAKR,UAAU,QACb,yBAAKA,UAAU,wBACb,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,6CAEF,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACP,uBAAGR,UAAU,aAAb,gBAKN,kBAACS,EAAA,EAAD,CAAWT,UAAU,eAClB5B,EAAMsC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAACH,EAAA,EAAUI,KAAX,CAAgBC,IAAKF,GACnB,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,uBAAGP,MAAO,CAAEc,WAAY,UACrBJ,EAAKK,OAGV,kBAACT,EAAA,EAAD,CAAKC,GAAI,GACP,2BACES,KAAK,WACLC,IAAI,WACJC,SAAU,SAACC,GAAD,OAAO,EAAK/B,aAAa+B,EAAGT,eAWxD,kBAACJ,EAAA,EAAD,CAAKC,GAAI,GACP,yBAAKR,UAAU,QACb,kBAACqB,EAAA,EAAD,CACEpB,MAAO,CAAEqB,OAAQ,OACjBC,YAAY,EACZC,iBAAiB,IACjBC,GAAG,4BAEH,kBAACC,EAAA,EAAD,CAAKC,SAAS,IAAIC,MAAM,0BACtB,uBAAG5B,UAAU,cAAb,oCAIA,yBAAKA,UAAU,sBACb,kBAAC,IAAD,CACE6B,MAAOC,IAAaC,SACpBC,OAAQ,IACR5B,MAAO,IACP6B,cAAe,CAAEC,EAAG,GAAIC,EAAG,CAAC,EAAG,KAC/BC,MAAO,CAAEF,EAAG,SAEZ,kBAAC,IAAD,CACEA,EAAG,IACHC,EAAG,EACHE,aAAW,EACXC,YAAY,aACZC,OAAQ,EACRtC,MAAO,CACLuC,OAAQ,CAAEC,OAAQ,SAClBb,MAAO,CAAEc,SAAU,IAErB3E,KAAM,CACJ,CACEiD,KAAM,YACN2B,OAAQ,CAAEC,KAAM,WAElB,CACE5B,KAAM,YACN2B,OAAQ,CAAEC,KAAM,SAAU3B,KAAM,YAItC,kBAAC,IAAD,CACE4B,cAAe,kBAAC,IAAD,MACf5C,MAAOH,KAAK3B,MAAM8B,MAClBlC,KAAMO,EACN4D,EAAE,aACFC,EAAE,cAKV,kBAACT,EAAA,EAAD,CAAKC,SAAS,IAAIC,MAAM,wBACtB,uBAAG5B,UAAU,cAAb,wBAYA,yBAAKA,UAAU,sBACb,kBAAC,IAAD,CACEjC,KAAMS,EACNsE,WAAY,CACV,UACA,UACA,UACA,WAEFZ,EAAE,OACFC,EAAE,8BAKR,kBAACT,EAAA,EAAD,CAAKC,SAAS,IAAIC,MAAM,6BACtB,uBAAG5B,UAAU,cAAb,8BACA,yBAAKA,UAAU,sBACb,kBAAC,IAAD,CACE6B,MAAOC,IAAaC,SACpBC,OAAQ,IACR5B,MAAO,IACP6B,cAAe,CAAEC,EAAG,GAAIC,EAAG,CAAC,EAAG,KAC/BC,MAAO,CAAEF,EAAG,SAEZ,kBAAC,IAAD,CACEA,EAAG,IACHC,EAAG,EACHE,aAAW,EACXC,YAAY,aACZC,OAAQ,EACRtC,MAAO,CACLuC,OAAQ,CAAEC,OAAQ,SAClBb,MAAO,CAAEc,SAAU,IAErB3E,KAAM,CACJ,CACEiD,KAAM,cACN2B,OAAQ,CAAEC,KAAM,WAElB,CACE5B,KAAM,YACN2B,OAAQ,CAAEC,KAAM,SAAU3B,KAAM,YAItC,kBAAC,IAAD,CACE4B,cAAe,kBAAC,IAAD,MACf5C,MAAOH,KAAK3B,MAAM8B,MAClBlC,KAAMQ,EACN2D,EAAE,OACFC,EAAE,uB,GA5PbY,cClBJC,MARf,WACE,OACE,yBAAKhD,UAAU,OACb,kBAAC,EAAD,QCKciD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjF,MAAK,SAAAkF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnF,QAAQmF,MAAMA,EAAMC,c","file":"static/js/main.e6973ea4.chunk.js","sourcesContent":["import axios from \"axios\";\n// export const serverIp = \"http://127.0.0.1:8000/\";\nexport const serverIp = \"http://rippedcoders.com:8002/\";\n\nexport const ServerAddr = axios.create({\n  baseURL: serverIp,\n  timeout: 30000,\n  headers: {},\n  withCredentials: true,\n  transformRequest: [\n    function (data, headers) {\n      return JSON.stringify(data);\n    },\n  ],\n});\n","import React, { Component } from \"react\";\n\n//server configuration\nimport { ServerAddr } from \"../netConfig\";\n\n//Victory Library imports\nimport {\n  VictoryChart,\n  VictoryBar,\n  Bar,\n  VictoryAxis,\n  VictoryTheme,\n  VictoryPie,\n  VictoryLegend,\n} from \"victory\";\n\n//Bootstrap imports\nimport {\n  Row,\n  Col,\n  Container,\n  ListGroup,\n  Nav,\n  Tabs,\n  Tab,\n} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\n\nimport \"./Main.css\";\n\nclass Main extends Component {\n  state = {\n    users: [],\n    selectedUsers: [],\n    userCount: [],\n    averageContribution: [],\n    overallContribution: [],\n    mostCount: {},\n  };\n\n  componentDidMount() {\n    this.getParticipants();\n    this.getMostLeastContribution();\n  }\n\n  getParticipants = () => {\n    //get request to fetch all users\n    ServerAddr.get(\"participants\").then((res) => {\n      console.log(\"data\", res);\n      if ((res[\"status\"] = 200)) {\n        var data = res[\"data\"][\"data\"];\n        this.setState({ users: data });\n      } else {\n      }\n    });\n  };\n\n  getUserCount = () => {\n    // post request to fetch the user and the times spoken during the call\n    ServerAddr.post(\"user/count\", {\n      users: this.state.selectedUsers,\n    }).then((res) => {\n      if (res) {\n        var data = res[\"data\"][\"data\"];\n        this.setState({ userCount: data });\n      } else {\n        alert(res.data.validation);\n      }\n    });\n  };\n\n  getAverageContribution() {\n    ServerAddr.post(\"user/average/contribution\", {\n      users: this.state.selectedUsers,\n    }).then((res) => {\n      if (res) {\n        console.log(\"average\", res);\n        var data = res[\"data\"][\"data\"];\n        this.setState({ averageContribution: data });\n      } else {\n        alert(res.data.validation);\n      }\n    });\n  }\n\n  getMostLeastContribution() {\n    ServerAddr.get(\"user/most&least/contribution\").then((res) => {\n      if (res) {\n        console.log(\"most/least\", res);\n        var data = res[\"data\"][\"data\"];\n        this.setState({ overallContribution: data[\"contribution\"] });\n        this.setState({ mostCount: data[\"most_and_least\"] });\n        console.log(\"state\", this.state.mostCount);\n      } else {\n        alert(res.data.validation);\n      }\n    });\n  }\n\n  handleChange = (event, data) => {\n    //maintain an array of user ids selected\n    let allUsers = this.state[\"selectedUsers\"];\n    let index = allUsers.findIndex((userData) => userData[\"id\"] === data[\"id\"]);\n    if (index === -1) allUsers.push(data);\n    else allUsers.splice(index, 1);\n    this.setState({ selectedUsers: allUsers });\n    this.getUserCount();\n    this.getAverageContribution();\n  };\n\n  render() {\n    const {\n      users,\n      userCount,\n      averageContribution,\n      overallContribution,\n      mostCount,\n    } = this.state;\n\n    return (\n      <div>\n        <div className=\"header\">\n          <h1>COMBINE AI MEETING ANALYSIS</h1>\n        </div>\n        <div className=\"body\" style={{ padding: \"1%\" }}>\n          <Card style={{ width: \"100%\" }}>\n            <Card.Body>\n              <Row>\n                <Col md={3}>\n                  <div className=\"card\">\n                    <div className=\"participants-wrapper\">\n                      <Row>\n                        <Col md={8}>\n                          <p>PARTICIPANTS </p>\n                        </Col>\n                        <Col md={4}>\n                          <p className=\"show-hide\">SHOW/HIDE</p>\n                        </Col>\n                      </Row>\n                    </div>\n\n                    <ListGroup className=\"custom-list\">\n                      {users.map((user, i) => {\n                        return (\n                          <ListGroup.Item key={i}>\n                            <Row>\n                              <Col md={10}>\n                                <p style={{ marginLeft: \"-60px\" }}>\n                                  {user.name}\n                                </p>\n                              </Col>\n                              <Col md={2}>\n                                <input\n                                  type=\"checkbox\"\n                                  ref=\"complete\"\n                                  onChange={(e) => this.handleChange(e, user)}\n                                />\n                              </Col>\n                            </Row>\n                          </ListGroup.Item>\n                        );\n                      })}\n                    </ListGroup>\n                  </div>\n                </Col>\n\n                <Col md={9}>\n                  <div className=\"card\">\n                    <Tabs\n                      style={{ margin: \"0px\" }}\n                      transition={false}\n                      defaultActiveKey=\"1\"\n                      id=\"uncontrolled-tab-example\"\n                    >\n                      <Tab eventKey=\"1\" title=\"Number of Times spoken\">\n                        <p className=\"tab-header\">\n                          Number of times partipant speaks\n                        </p>\n\n                        <div className=\"times-spoken card \">\n                          <VictoryChart\n                            theme={VictoryTheme.material}\n                            height={300}\n                            width={300}\n                            domainPadding={{ x: 50, y: [0, 20] }}\n                            scale={{ x: \"time\" }}\n                          >\n                            <VictoryLegend\n                              x={120}\n                              y={5}\n                              centerTitle\n                              orientation=\"horizontal\"\n                              gutter={5}\n                              style={{\n                                border: { stroke: \"black\" },\n                                title: { fontSize: 5 },\n                              }}\n                              data={[\n                                {\n                                  name: \"Y - Count\",\n                                  symbol: { fill: \"tomato\" },\n                                },\n                                {\n                                  name: \"X - Users\",\n                                  symbol: { fill: \"orange\", type: \"star\" },\n                                },\n                              ]}\n                            />\n                            <VictoryBar\n                              dataComponent={<Bar />}\n                              style={this.state.style}\n                              data={userCount}\n                              x=\"user__name\"\n                              y=\"dcount\"\n                            />\n                          </VictoryChart>\n                        </div>\n                      </Tab>\n                      <Tab eventKey=\"2\" title=\"Overall Contribution\">\n                        <p className=\"tab-header\">Overall Contribution</p>\n                        {/* <p>\n                          User who contributed the most{\" \"}\n                          {mostCount[\"most\"][\"name\"] -\n                            mostCount[\"most\"][\"diff\"]}\n                        </p>\n                        <p>\n                          User who contributed the least{\" \"}\n                          {mostCount[\"least\"][\"name\"] -\n                            mostCount[\"least\"][\"diff\"]}{\" \"}\n                        </p> */}\n\n                        <div className=\"times-spoken card \">\n                          <VictoryPie\n                            data={overallContribution}\n                            colorScale={[\n                              \"#F4511E\",\n                              \"#FFF59D\",\n                              \"#8BC34A\",\n                              \"#006064\",\n                            ]}\n                            x=\"name\"\n                            y=\"percentage_contribution\"\n                          />\n                        </div>\n                      </Tab>\n\n                      <Tab eventKey=\"3\" title=\"Average Contribution/User\">\n                        <p className=\"tab-header\"> Average Contribution/User</p>\n                        <div className=\"times-spoken card \">\n                          <VictoryChart\n                            theme={VictoryTheme.material}\n                            height={300}\n                            width={300}\n                            domainPadding={{ x: 50, y: [0, 20] }}\n                            scale={{ x: \"time\" }}\n                          >\n                            <VictoryLegend\n                              x={100}\n                              y={5}\n                              centerTitle\n                              orientation=\"horizontal\"\n                              gutter={5}\n                              style={{\n                                border: { stroke: \"black\" },\n                                title: { fontSize: 5 },\n                              }}\n                              data={[\n                                {\n                                  name: \"Y - Seconds\",\n                                  symbol: { fill: \"tomato\" },\n                                },\n                                {\n                                  name: \"X - Users\",\n                                  symbol: { fill: \"orange\", type: \"star\" },\n                                },\n                              ]}\n                            />\n                            <VictoryBar\n                              dataComponent={<Bar />}\n                              style={this.state.style}\n                              data={averageContribution}\n                              x=\"name\"\n                              y=\"avg\"\n                            />\n                          </VictoryChart>\n                        </div>\n                      </Tab>\n                    </Tabs>\n                  </div>\n                </Col>\n              </Row>\n            </Card.Body>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./Components/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}